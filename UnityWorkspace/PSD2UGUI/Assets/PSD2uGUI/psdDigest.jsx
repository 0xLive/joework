// NAME: // 	psdDigest// DESCRIPTION: //	Saves each layer in the active document to a PNG or JPG file named after the layer. //	These files will be created in "/Interface" relative path folder placed from current document director// REQUIRES: // 	Adobe Photoshop CS2 or higher////////////////////////////////////////////////////////////////////////////////////////////////The MIT License (MIT)//Copyright (c) 2013 Johannes Walter//Permission is hereby granted, free of charge, to any person obtaining a copy of//this software and associated documentation files (the "Software"), to deal in//the Software without restriction, including without limitation the rights to//use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of//the Software, and to permit persons to whom the Software is furnished to do so,//subject to the following conditions://The above copyright notice and this permission notice shall be included in all//copies or substantial portions of the Software.//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS//FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR//COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER//IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN//CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.///////////////////////////////////////////////////////////////////////////////////////////////// enable double-clicking from Finder/Explorer (CS2 and higher)#target photoshopapp.bringToFront();var folderName = "";var trimEnabled = true;var duppedDocument;var targetType = "Current"; // by defaultvar xResValue = 1024;var yResValue = 768;var exportExchangeFile = false;var exportFolder = false;var resize = true;var mustStop = true;// it retrieves the info from the layer passed as parameterfunction getLayerInfo(layer){    var xPos = layer.bounds[0].value;    var yPos = layer.bounds[1].value;    var xSize = layer.bounds[2].value - xPos;    var ySize = layer.bounds[3].value - yPos;    return [layer.name, xPos, yPos, xSize, ySize];}// It asks if the layers passed as parameter is a set of layers or notfunction isLayerSet(layer) {    try    {        if ( layer.layers.length > 0 )            return true;    } catch(er)     {        return false;    }}function buildLayerData(layerInfo, depth){    var t = "\n[Layer]\n";    t   += "Name " +  layerInfo[0]  + "\n";    t   += "Depth "+ depth + "\n";    t   += "PosX " + layerInfo[1] + "\n";    t   += "PosY " + layerInfo[2] + "\n";    t   += "SizeX "+ layerInfo[3] + "\n";      t   += "SizeY "+ layerInfo[4] + "\n";    t   += "[Layer end]\n";    return t;}function getLayerVisiblesFromRoot(layer){    var v = 0;    for (var i = 0; i < layer.layers.length; ++i)    {        if (layer.layers[i].visible)        {            ++v;        }    }        return v;}function buildDirectory(pathName){    var folder = Folder(pathName);    if (!folder.exists)    {        folder.create();    }}function getResolution(targetType){    // Main size    var width = 4096;    var height = 3072    var resolution = 300;     if (targetType == "Current")    {        resize = false;        width = xResValue;        height = yResValue;    } else if (targetType == "Custom - PC - Android")    {        if ((xResValue > 1) && (yResValue > 1))        {             width = xResValue;             height = yResValue;        }    } else if (targetType == "iPhone 4 - Landscape")    {        width = 960;        height = 640;    } else if (targetType == "iPhone 5 - Landscape")    {        width = 1136;        height = 640;            } else if (targetType == "iPad 2 - Landscape")    {        width = 1024;        height = 768;    } else if (targetType == "iPad Air -Landscape")    {        width = 2048;        height = 1536;    } else if (targetType == "iPhone 4 - Portrait")    {        width = 640;        height = 960;    } else if (targetType == "iPhone 5 - Portrait")    {        width = 640;        height = 1136;            } else if (targetType == "iPad 2 - Portrait")    {        width = 768;        height = 1024;    } else if (targetType == "iPad Air -Portrait")    {        width = 1536;        height = 2048;    }     return [width, height, resolution];}function main() {    try    {        var docRef = app.activeDocument;        var docName = decodeURI(docRef.name);        var defaultRulerUnits = preferences.rulerUnits;        preferences.rulerUnits = Units.PIXELS;        xResValue = docRef.width.value;        yResValue = docRef.height.value;    } catch (er)    {        error = true;        alert('You have to open a Photoshop file');         return;    }    // two quick checks	if(!okDocument()) {        alert("Document must be saved and be a layered PSD.");        return;     }        var visible = getLayerVisiblesFromRoot(app.activeDocument);    var len = visible; //activeDocument.layers.length;    ok = confirm("Note: All layers will be saved in same directory as your PSD.\nThis document contains " + len + " top level layers.\nBe aware that large numbers of layers may take some time!\nContinue?");    if(!ok) return;        // user preferences    prefs = new Object();    prefs.fileType = "PNG"; // The first option    prefs.fileQuality = "24";    prefs.filePath = app.activeDocument.path;    prefs.count = 0;    //instantiate dialogue    Dialog();    if (mustStop) return;     var name = docName.split ('.');    if (exportFolder)        folderName = Folder.selectDialog("Select your target folder to export");    else        folderName = prefs.filePath;    folderName = folderName +  "/" + name[0] + name[1].toUpperCase() + " Assets";    var path = folderName;    buildDirectory(path);    // Saving current activeDocument name before dupplying    var docName = app.activeDocument.name;    duppedDocument = activeDocument.duplicate();    try    {        var theFile = path + "/" + name[0] + name[1].toUpperCase()+ ".toParse";        // Opening the target file        var txtFile = new File(theFile);        txtFile.open("w");                var resolution = getResolution(targetType);        if (resize == true)        {            duppedDocument.resizeImage (resolution[0], resolution[1], resolution[2], ResampleMethod.BICUBIC);        }        hideLayers(duppedDocument);        var writableInfo = saveLayers(duppedDocument, app.documents[docName], "", 1, 0, "");                // Writing data to the target file        txtFile.writeln("[nLayers]\n" + visible + "\n");        txtFile.writeln("[Resolution]\n" + resolution[0] + "x" + resolution[1] + "\n");        txtFile.writeln("[FileFormat]\n" + prefs.fileType + "\n" + writableInfo[0]);        // Closing the written file        txtFile.close();                if (!exportExchangeFile)        {            alert("Saved " + prefs.count + " images and the exchange file");        } else        {            alert("Exchange file has been saved");        }        duppedDocument.close( SaveOptions.DONOTSAVECHANGES );    } catch (er)    {         $.writeln(er);    }}function hideLayers(ref) {    var len = ref.layers.length;    for (var i = 0; i < len; i++) {        var layer = ref.layers[i];        if (layer.typename == 'LayerSet') hideLayers(layer);        else layer.visible = false;    }}function saveLayers(ref, realRef, text, mainDepth, manyLayers, fold) {    preferences.rulerUnits = Units.PIXELS;    var len = ref.layers.length;    var t = "";    var depth = mainDepth;    var howManyLayers = 0;    // rename layers top to bottom    for (var i = 0; i < len; i++) {    	var newFolder = fold;        var layer = ref.layers[i];        if (realRef.layers[i].visible == true)        {            var layerInfo = getLayerInfo(layer);            ++manyLayers;            ++howManyLayers;            if (layer.typename == 'LayerSet') {                var str = layer.name.split("@");                if (str.length > 1)  {                    newFolder = str[1];                } else {                    // recurse if current layer is a group                    hideLayers(layer);                    t += "\n[LayerSet]\n";                    t += "Name " + layerInfo[0] +"\n";                    t += "Depth " + 0 + "\n";                }                var result = saveLayers(layer, realRef.layers[i], t, depth, manyLayers, newFolder);                t += result[0];                if (str.length <= 1) {                    t += "\nnLayers " + result[2] + "\n";                    t += "[LayerSet end]\n";                                    manyLayers = result[1];                    depth = result[3];                }            } else            {                layer.visible = true;                var xPos = layer.bounds[0].value;                var yPos = layer.bounds[1].value;                                var skip = false;                try {                    layer.translate(0 - xPos, 0 - yPos);                } catch (e) {                    skip = true; // This layer should be skipped (no trim and no export).                }                t += buildLayerData(layerInfo, depth);                var dup;                if (!exportExchangeFile)                {                    dup = app.activeDocument.duplicate();                }                if (trimEnabled && !exportExchangeFile)                {                    if (!skip)                    {                        app.activeDocument.trim(TrimType.TRANSPARENT);                    }                }                                if (!exportExchangeFile)                {                    if (!skip)                    {                        saveImage(layer.name, newFolder);                    }                    dup.close(SaveOptions.DONOTSAVECHANGES);                }                if (!skip)                {                   layer.translate(xPos, yPos);                }                layer.visible = false;                ++depth;            }        }    }    return [t, manyLayers, howManyLayers, depth];}function saveImage(layerName, fold) {    var fileName = layerName.replace(/[\\\*\/\?:"\|<>]/g,'');     if(fileName.length ==0) fileName = "autoname";    buildDirectory(folderName + "/" + fold);    var handle = checkIfExists(folderName + "/" + fold + "/" + fileName);    prefs.count++;        //if(prefs.fileType=="PNG" && prefs.fileQuality=="8") {     //   SavePNG8(handle);     /*} else*/ if (prefs.fileType=="PNG") {// && prefs.fileQuality=="24") {        SavePNG24(handle);    } else if (prefs.fileType=="JPEG"){        SaveJPEG(handle);     } else {        SavePSD(handle);        }}function checkIfExists(fileroot) {     // form a full file name    // if the file name exists, a numeric suffix will be added to disambiguate    var handle = File(fileroot + "." + prefs.fileType);    if (handle.exists) {        handle.remove();    }            return handle;        //var filename = fileroot;    //for (var i=1; i<100; i++) {    //    var handle = File(filename + "." + prefs.fileType);     //   if(handle.exists) {    //        filename = fileroot + "-" + padder(i, 3);    //    } else {    //        return handle;     //    }    //}} function padder(input, padLength) {    // pad the input with zeroes up to indicated length    var result = (new Array(padLength + 1 - input.toString().length)).join('0') + input;    return result;}function SavePNG8(saveFile) {     exportOptionsSaveForWeb = new ExportOptionsSaveForWeb();    exportOptionsSaveForWeb.format = SaveDocumentType.PNG    exportOptionsSaveForWeb.dither = Dither.NONE;    activeDocument.exportDocument( saveFile, ExportType.SAVEFORWEB, exportOptionsSaveForWeb );} function SavePNG24(saveFile) {     pngSaveOptions = new PNGSaveOptions();     activeDocument.saveAs(saveFile, pngSaveOptions, true, Extension.LOWERCASE); } function SaveJPEG(saveFile) {     jpegSaveOptions = new JPEGSaveOptions();     jpegSaveOptions.quality = prefs.fileQuality;    activeDocument.saveAs(saveFile, jpegSaveOptions, true, Extension.LOWERCASE); } function SavePSD(saveFile) {	var psd_Opt               = new PhotoshopSaveOptions();    psd_Opt.layers            = true; // Preserve layers.    psd_Opt.embedColorProfile = true; // Preserve color profile.    psd_Opt.annotations       = true; // Preserve annonations.    psd_Opt.alphaChannels     = true; // Preserve alpha channels.    psd_Opt.spotColors        = true; // Preserve spot colors.    // Save active document in the Auto Save folder    activeDocument.saveAs(saveFile, psd_Opt, true );}function Dialog() {    // building the dialog window    var dialog = new Window ('dialog', 'Export options');     dialog.orientation = "row";    //dialog.etext = dialog.add("edittext", undefined, "Enter your folder name");    //dialog.etext.characters = 20;    //dialog.etext.active = true;    dialog.labela = dialog.add("statictext", undefined, "Select your target format");    dialog.format = dialog.add("dropdownlist", undefined, "");     //dialog.trim = dialog.add("checkbox", undefined, "Trim");    //dialog.trim.value = false;    //trimEnabled = dialog.trim.value;    dialog.labelb = dialog.add("statictext", undefined, "Select yout JPEG file quality");    dialog.quality = dialog.add("dropdownlist", undefined, "");    //dialog.pngtype = dialog.add("dropdownlist", undefined, "");    dialog.screenRes = dialog.add("listbox", undefined,    [     "Current"    ,"Custom - PC - Android"    ,"iPhone 4 - Landscape"    , "iPhone 5 - Landscape"    , "iPad 2 - Landscape"    , "iPad Air - Landscape"     ,"iPhone 4 - Portrait"    , "iPhone 5 - Portrait"    , "iPad 2 - Portrait"    , "iPad Air - Portrait"    ], {multiselect: false});    dialog.screenRes.items[0].selected = true;        dialog.exportbox = dialog.add("checkbox", undefined, "Export exchange file only");    dialog.exportbox.value = false;    dialog.exportfolder = dialog.add("checkbox", undefined, "Choose your own export folder");    dialog.exportfolder.value = false;    dialog.labelRes = dialog.add("statictext", undefined, "Custom resolution");    dialog.labelRes.titleLayout = { alignment: ['center', 'center'] };    dialog.width = dialog.add("edittext", undefined, xResValue);    dialog.height = dialog.add("edittext", undefined, yResValue);    dialog.labelRes.hide();    dialog.width.hide();    dialog.height.hide();    // file type    var saveOpt = [];    saveOpt[0] = "PNG";     saveOpt[1] = "JPEG";    saveOpt[2] = "PSD";    for (var i=0, len=saveOpt.length; i<len; i++) {        dialog.format.add ("item", "Save as " + saveOpt[i]);    };     dialog.exportbox.onClick = function() {        exportExchangeFile = dialog.exportbox.value;    };    dialog.exportfolder.onClick = function() {        exportFolder = dialog.exportfolder.value;    };    // trigger function    dialog.format.onChange = function() {        prefs.fileType = saveOpt[parseInt(this.selection)];         // decide whether to show JPG or PNG options        if(prefs.fileType==saveOpt[1]){            dialog.labelb.show();            dialog.quality.show();            //dialog.trim.hide();            //dialog.pngtype.hide();        } else if (prefs.fileType==saveOpt[0]){            dialog.labelb.hide();            dialog.quality.hide();            //dialog.pngtype.show();            //dialog.trim.show();        } else {            dialog.labelb.hide();            dialog.quality.hide();            //dialog.trim.show();            //dialog.pngtype.hide();        }    };     // jpg quality    var qualityOpt = [];    for(var i=12; i>=1; i--) {        qualityOpt[i] = i;        dialog.quality.add ('item', "" + i);    };     // png type    var pngtypeOpt = [];    pngtypeOpt[0]=8;    pngtypeOpt[1]=24;    //dialog.pngtype.add ('item', ""+ 8 );    //dialog.pngtype.add ('item', "" + 24);    // trigger functions    dialog.quality.onChange = function() {        prefs.fileQuality = qualityOpt[12-parseInt(this.selection)];    };    //dialog.pngtype.onChange = function() {    //   prefs.fileQuality = pngtypeOpt[1]; //pngtypeOpt[parseInt(this.selection)];     //};    //dialog.trim.onClick = function() {    //   trimEnabled = !trimEnabled;    //};    dialog.screenRes.onChange = function() {       targetType = dialog.screenRes.selection.text;        if (targetType == "Custom - PC - Android")       {            dialog.width.show();            dialog.height.show();            dialog.labelRes.show();            xResValue = parseInt(dialog.width.text);            yResValue = parseInt(dialog.height.text);       } else       {            dialog.labelRes.hide();            dialog.width.hide();            dialog.height.hide();       }    };    dialog.btnRun = dialog.add("button", undefined, "Continue" );     dialog.btnRun.onClick = function() {        this.parent.close(0);        mustStop = false;    };         dialog.btnStop = dialog.add("button", undefined, "Stop" );     dialog.btnStop.onClick = function() {        this.parent.close(0);         mustStop = true;    };     dialog.orientation = 'column';     dialog.format.selection = dialog.format.items[0] ;    dialog.quality.selection = dialog.quality.items[0] ;    dialog.center();     dialog.show();}function okDocument() {     // check that we have a valid document         if (!documents.length) return false;    var thisDoc = app.activeDocument;     var fileExt = decodeURI(thisDoc.name).replace(/^.*\./,'');     return fileExt.toLowerCase() == 'psd'}function wrapper() {    function showError(err) {        alert(err + ': on line ' + err.line, 'Script Error', true);    }    try {        // suspend history for CS3 or higher       // if (parseInt(version, 10) >= 10) {        //    if (app.activeDocument)        //    {        //        app.activeDocument.suspendHistory('Save Layers', 'main()');        //    } else       //     {        //        alert("Open a file before using this script", 'Script error', true);       //     }       // } else {            main();        //}    } catch(e) {        // report errors unless the user cancelled        if (e.number != 8007) showError(e);    }}wrapper();